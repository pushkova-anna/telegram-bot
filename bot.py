import logging
from gspread import Worksheet
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å Google Sheets API
scope = ['https://www.googleapis.com/auth/spreadsheets', "https://www.googleapis.com/auth/drive"]
creds_file: str = 'vacationtrackerbot-449910-7facd633d4c7.json'  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É JSON-—Ñ–∞–π–ª—É —Å –∫–ª—é—á–∞–º–∏
creds = ServiceAccountCredentials.from_json_keyfile_name(creds_file, scope)
client = gspread.authorize(creds)
sheet: Worksheet = client.open_by_key("1W2jYXR9Nexw26WuP0hH7HIdc0ryLr7P7uNb2S7UWj1I").sheet1  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
TELEGRAM_TOKEN: str = '7448225374:AAH8r9K2oVBxkKwkgw8tfKPYzD97NqzU2UU'


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—É—Å–∫–æ–≤, –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö.')


async def request_leave(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /leave –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫.
    """
    user_name = update.message.from_user.username
    leave_request = ' '.join(context.args)  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å 'request' –Ω–∞ 'leave_request'

    if len(leave_request.split()) != 3:
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø (–æ—Ç–ø—É—Å–∫, –±–æ–ª—å–Ω–∏—á–Ω—ã–π –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π) –∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "—Ç–∏–ø –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì"')
        return

    try:
        leave_type, start_date_str, end_date_str = leave_request.split()  # –ó–∞–º–µ–Ω–∏–ª–∏ 'request' –Ω–∞ 'leave_request'
        start_date = datetime.strptime(start_date_str, "%d.%m.%Y")
        end_date = datetime.strptime(end_date_str, "%d.%m.%Y")
        delta = (end_date - start_date).days + 1  # –í–∫–ª—é—á–∞–µ–º –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
        row = [user_name, leave_type, start_date.strftime('%d.%m.%Y'), end_date.strftime('%d.%m.%Y'), delta,
               "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        logger.info(
            f"Received leave request: {leave_request} from user: {user_name}")  # –ó–∞–º–µ–Ω–∏–ª–∏ 'request' –Ω–∞ 'leave_request'
        logger.info(f"Attempting to add row to sheet: {row}")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        await asyncio.to_thread(sheet.append_row, row)

        await update.message.reply_text(
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ {leave_type} —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} –Ω–∞ {delta} –¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    except ValueError as e:
        logger.error(f"Error in date format: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã: {e}")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")


async def approve_leave(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /approve –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
    """
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é annapushkov
    if update.message.from_user.username not in ['idealpromo', 'annapushkov']:  # –î–æ–±–∞–≤–ª–µ–Ω annapushkov
        await update.message.reply_text('–¢–æ–ª—å–∫–æ CEO –∏–ª–∏ annapushkov –º–æ–≥—É—Ç —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞—è–≤–∫–∏!')
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        all_rows = await asyncio.to_thread(sheet.get_all_values)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        if len(all_rows) <= 1:  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ
            await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return

        # –ò—â–µ–º –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        for i, row in enumerate(all_rows[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if len(row) >= 6 and row[5] == "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
                await asyncio.to_thread(sheet.update_cell, i, 6, '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_name = row[0]
                leave_type = row[1]
                start_date = row[2]
                end_date = row[3]
                days = row[4]

                await update.message.reply_text(
                    f"–ó–∞—è–≤–∫–∞ –Ω–∞ {leave_type} –æ—Ç {user_name} —Å {start_date} –ø–æ {end_date} –Ω–∞ {days} –¥–Ω–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
                )
                return

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /approve: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")


async def view_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /view –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        all_rows = await asyncio.to_thread(sheet.get_all_values)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        if len(all_rows) <= 1:  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ
            await update.message.reply_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∑–∞—è–≤–∫–∞–º–∏
        response = "–í—Å–µ –∑–∞—è–≤–∫–∏:\n"
        for row in all_rows[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if len(row) >= 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                user_name, leave_type, start_date, end_date, days, status = row
                response += (
                    f"üë§ {user_name}\n"
                    f"üìÖ {start_date} - {end_date} ({days} –¥–Ω–µ–π)\n"
                    f"üìù –¢–∏–ø: {leave_type}\n"
                    f"üü¢ –°—Ç–∞—Ç—É—Å: {status}\n"
                    "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                )

        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /view: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π application
    application: Application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("leave", request_leave))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    application.add_handler(CommandHandler("approve", approve_leave))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    application.add_handler(CommandHandler("view", view_requests))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()  # –ó–∞–ø—É—Å–∫ main() –±–µ–∑ asyncio.run()